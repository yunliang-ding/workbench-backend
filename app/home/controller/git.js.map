{
    "version": 3,
    "sources": [
        "../../../src/home/controller/git.js"
    ],
    "names": [
        "require",
        "exec",
        "Git",
        "statusAction",
        "Repository",
        "open",
        "get",
        "then",
        "_repository",
        "getStatus",
        "_status",
        "map",
        "path",
        "_item",
        "isTypechange",
        "statusBit",
        "status",
        "isNew",
        "isModified",
        "isDeleted",
        "inWorkingTree",
        "isConflicted",
        "isIgnored",
        "isRenamed",
        "inIndex",
        "indexToWorkdir",
        "headToIndex",
        "json",
        "data",
        "isError",
        "console",
        "log",
        "error",
        "branchAction",
        "getCurrentBranch",
        "Branch",
        "name",
        "res",
        "_branch",
        "branch",
        "getstagedAction",
        "gitCommand",
        "stagedId",
        "some",
        "_file",
        "split",
        "stagedContent",
        "join",
        "checkoutAction",
        "addAction",
        "resetAction",
        "gitignoreAction",
        "waitcommitAction",
        "commitAction",
        "pushAction",
        "cmd",
        "resolve",
        "err",
        "stdout",
        "stderr",
        "message",
        "filter",
        "_stdout",
        "Base"
    ],
    "mappings": "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",
    "file": "../../../src/home/controller/git.js",
    "sourcesContent": [
        "'use strict';\nimport Base from './base.js';\nconst { exec } = require('child_process')\nconst Git = require(\"nodegit\");\n// const statusMapping = new Proxy({\n//   'A ': {\n//     inWorkingTree: 0,\n//     status: [\"INDEX_NEW\"]\n//   },\n//   '??': {\n//     inWorkingTree: 1,\n//     status: [\"WT_NEW\"]\n//   },\n//   'M ': {\n//     inWorkingTree: 0,\n//     status: [\"INDEX_MODIFIED\"]\n//   },\n//   ' M': {\n//     inWorkingTree: 1,\n//     status: [\"WT_MODIFIED\"]\n//   },\n//   'D ': {\n//     inWorkingTree: 0,\n//     status: [\"INDEX_DELETED\"]\n//   },\n//   ' D': {\n//     inWorkingTree: 1,\n//     status: [\"WT_DELETED\"]\n//   }\n// }, {\n//   get: (target, key, receiver) => {\n//     return target[key] || {\n//       inWorkingTree: 0,\n//       status: 0\n//     }\n//   }\n// })\nexport default class extends Base {\n  async statusAction() {\n    try {\n      const status = await Git.Repository.open(this.get('path')).then((_repository) => {\n        return _repository.getStatus().then(_status => {\n          return _status.map(_item => {\n            return {\n              path: _item.path(),\n              isTypechange: _item.isTypechange(),\n              statusBit: _item.statusBit(),\n              status: _item.status(),\n              isNew: _item.isNew(),\n              isModified: _item.isModified(),\n              isDeleted: _item.isDeleted(),\n              inWorkingTree: _item.inWorkingTree(),\n              isConflicted: _item.isConflicted(),\n              isIgnored: _item.isIgnored(),\n              isRenamed: _item.isRenamed(),\n              inIndex:_item.inIndex(),\n              indexToWorkdir: _item.indexToWorkdir(),\n              headToIndex: _item.headToIndex()\n            }\n          })\n        })\n      })\n      // let data = await this.gitCommand(`cd ${this.get('path')};git status -s`)\n      // let status = []\n      // data.data.map(item => {\n      //   status.push({\n      //     path: item.substr(2),\n      //     inWorkingTree: statusMapping[item.substring(0, 2)].inWorkingTree,\n      //     status: statusMapping[item.substring(0, 2)].status\n      //   })\n      // })\n      this.json({\n        data: status,\n        isError: false\n      })\n    } catch (error) {\n      console.log(error)\n      this.json({\n        error,\n        isError: true\n      })\n    }\n  }\n  async branchAction() {\n    try {\n      const branch = await Git.Repository.open(this.get('path')).then((_repository) => {\n        return _repository.getCurrentBranch().then(res=>{\n          return Git.Branch.name(res).then((_branch) => {\n            return _branch\n          })\n        })\n      })\n      this.json({\n        data: branch,\n        isError: false\n      })\n    } catch (error) {\n      console.log(error)\n      this.json({\n        error,\n        isError: true\n      })\n    }\n  }\n  async getstagedAction() {\n    try {\n      const { data } = await this.gitCommand(`cd ${this.get('path')};git ls-files -s`);\n      let stagedId = ''\n      data && data.some(_file => {\n        if (this.get('name') === _file.split('\\t')[1]) {\n          stagedId = _file.split('\\t')[0].split(' ')[1]\n          return true // 结束循环\n        }\n      })\n      const stagedContent = await this.gitCommand(`cd ${this.get('path')};git cat-file -p ${stagedId}`)\n      this.json({\n        data: stagedContent && stagedContent.data && stagedContent.data.join('\\n') || '',\n        isError: false\n      })\n    } catch (error) {\n      console.log(error)\n      this.json({\n        error,\n        isError: true\n      })\n    }\n  }\n  async checkoutAction() {\n    try {\n      const { data, isError } = await this.gitCommand(`cd ${this.get('path')};git checkout -- ${this.get('filePath')}`)\n      this.json({\n        data,\n        isError\n      })\n    } catch (error) {\n      console.log(error)\n      this.json({\n        error,\n        isError: true\n      })\n    }\n  }\n  async addAction() {\n    try {\n      const { data, isError } = await this.gitCommand(`cd ${this.get('path')};git add ${this.get('filePath')}`)\n      this.json({\n        data,\n        isError\n      })\n    } catch (error) {\n      console.log(error)\n      this.json({\n        error,\n        isError: true\n      })\n    }\n  }\n  async resetAction() {\n    try {\n      const { data, isError } = await this.gitCommand(`cd ${this.get('path')};git reset HEAD -- ${this.get('filePath')}`)\n      this.json({\n        data,\n        isError\n      })\n    } catch (error) {\n      console.log(error)\n      this.json({\n        error,\n        isError: true\n      })\n    }\n  }\n  async gitignoreAction() {\n    try {\n      const { data, isError } = await this.gitCommand(`cd ${this.get('path')};cat .gitignore;`)\n      this.json({\n        data,\n        isError\n      })\n    } catch (error) {\n      console.log(error)\n      this.json({\n        error,\n        isError: true\n      })\n    }\n  }\n  async waitcommitAction() {\n    try {\n      const { data, isError } = await this.gitCommand(`cd ${this.get('path')};git log origin/${this.get('branch')}..HEAD --oneline;`)\n      this.json({\n        data,\n        isError\n      })\n    } catch (error) {\n      console.log(error)\n      this.json({\n        error,\n        isError: true\n      })\n    }\n  }\n  async commitAction() {\n    try {\n      const { data, isError } = await this.gitCommand(`cd ${this.get('path')};git add .;git commit -m \"${this.get('commitInfo')}\";`)\n      this.json({\n        data,\n        isError\n      })\n    } catch (error) {\n      console.log(error)\n      this.json({\n        error,\n        isError: true\n      })\n    }\n  }\n  async pushAction() {\n    try {\n      const { data, isError } = await this.gitCommand(`cd ${this.get('path')};git push;`)\n      this.json({\n        data,\n        isError\n      })\n    } catch (error) {\n      console.log(error)\n      this.json({\n        error,\n        isError: true\n      })\n    }\n  }\n  async gitCommand(cmd) {\n    try {\n      const data = await new Promise((resolve) => {\n        exec(cmd, (err, stdout, stderr) => {\n          console.log('err==>', err)\n          if (err === null) {\n            if (stderr !== \"\") {\n              stdout = stderr + stdout\n            }\n            resolve({\n              isError: false,\n              message: null,\n              data: stdout && stdout.split('\\n').filter(_stdout => {\n                return _stdout !== ''\n              }),\n              stderr\n            })\n          } else {\n            resolve({\n              isError: true,\n              message: stderr\n            })\n          }\n        })\n      })\n      return data\n    } catch (error) {\n      console.log(error)\n      return {\n        isError: true,\n        error\n      }\n    }\n  }\n}\n"
    ]
}